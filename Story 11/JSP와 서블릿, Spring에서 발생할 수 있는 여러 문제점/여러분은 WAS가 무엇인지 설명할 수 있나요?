# why? 
- 이번 챕터에서 WAS라는 용어가 나오는데, 누군가가 "나한테 WAS가 뭐야?" 라고 물어보면 
- 살짝 뇌정지가 올 것 같아서, 이번 기회에 한번 정리해보려고 한다.


@ 서버와 클라이언트의 통신이 어떻게 이루어지는지 간략하게 보자

Client                  1.요청 
↓
Web Server           2.처리를 요청 
↓
WAS			 3.처리를 수행 
↓
DB                     4.처리를 수행
↓
WAS                  5.서버(처리결과 웹서버로 돌려보낸다)
↓
Web Server          6.응답 
↓
Client 


- 위의 순서에 따라, Web Server 부터 무엇인지 알아보자.


@ Web Server 
- 웹 서버는 소프트웨어와 하드웨어로 구분이 된다.

@ Web Server (SoftWare)
- 클라이언트의 요청에 응답을 보내는 컴퓨터 프로그램
- 클라이언트가 A라는 데이터를 달라고하면, 해당 데이터를 주는 곳
- A라는 데이터는 HTML 문서일 수도 있고 각종 리소스(자원)이다.
- 가장 많이 사용되는 Web Server 프로그램은 Apache, Nginx, Microsoft IIS 등이 있다.
- Apache, Nginx는 오픈소스 소프트웨어로, 거의 대부분 운영체제에서 무료로 설치 및 사용을 할 수 있다!

@ Web Server (HardWare)
- 바로 위에서 언급한 소프트웨어가 설치되어 있는 컴퓨터이다.
- 보통은 전산실에 있는 큰 본체를 생각하면 된다.



# 아니 그럼 WAS는 뭐야?

@ WAS (Web Application Server)
- Web Server +  Web Container의 기능을 모두 수행하는 프로그램
- 웹 프로그램을 실행할 수 있는 기초적인 환경을 제공 
- 우리가 잘 아는 Apache의 Tomcat이 대표적인 예이다.
- 서버 규모가 커질 경우 Web Server와 Web Container를 분리한다고 한다. 
- 자원 이용의 효율성 및 배포, 유지보수의 편의성을 볼 때 그게 더 낫기 때문이다.

@ Web Container
- Client의 요청에 따른 데이터를 DB에서 전달받아 웹 서버로 전달하는 프로그램
- 주방에서 나온 음식을 서빙 종업원에게 전달하는 사람이 웹 컨테이너,  
- 전달받아 손님에게 전달해주는사람이 웹 서버
- 웹서버를 지원하는 역할이라고 하며, 미들 웨어라고도 한다.


@ Web Application
- 웹을 기반으로 실행되는 프로그램
